
signature MVector
  ( MVector
  , new
  , read
  , write
  , slice
  , copy
  , length
  ) where

import Prelude hiding (read, length)

import Control.Monad.Primitive (PrimMonad(PrimState))

import Elem

data MVector s

new :: PrimMonad m => Int -> m (MVector (PrimState m))
read :: PrimMonad m => MVector (PrimState m) -> Int -> m Elem
write :: PrimMonad m => MVector (PrimState m) -> Int -> Elem -> m ()
copy :: PrimMonad m
     => MVector (PrimState m) -> MVector (PrimState m) -> m ()

slice :: Int -> Int -> MVector s -> MVector s
length :: MVector s -> Int

